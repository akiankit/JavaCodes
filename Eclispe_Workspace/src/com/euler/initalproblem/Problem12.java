/*The sequence of triangle numbers is generated by adding the natural numbers. 
  So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?*/
package com.euler.initalproblem;

import java.util.Scanner;


public class Problem12 {

	public static void main(String[] args) {
		long s = System.currentTimeMillis();
		Scanner scanner = new Scanner(System.in);
		int tests = scanner.nextInt();
        for (int i = 0; i < tests; i++) {
            boolean found = false;
            int start = 1;
            int sum = 1;
            int n = scanner.nextInt();
            while (false == found) {
                if (start % 2 == 0) {
                    sum = (start / 2) * (start + 1);
                } else {
                    sum = (start) * ((start + 1) / 2);
                }
                if (totalNumberOfFactors(sum) > n) {
                    found = true;
                }
                start++;
            }
            System.out.println(sum);
        }
		System.out.println("Time taken="+(System.currentTimeMillis()-s));
		scanner.close();
	}
	
	static public int totalNumberOfFactors(int num) {
        int numbers[] = new int[1000];
        int factors[] = new int[1000];
        getPrimeFactors(num, numbers, factors);
        int res = factors[0] + 1;
        for (int i = 1; i < factors.length && factors[i] != 0; i++) {
            res *= (factors[i] + 1);
        }
        return res;
    }

    static public void getPrimeFactors(int num, int numbers[], int factors[]) {
        int j = 0;
        int count = 0;
        int i = 2;
        for (; i * i <= num; i++) {
            count = 0;
            while (num % i == 0) {
                count++;
                num = num / i;
            }
            if (count != 0) {
                numbers[j] = i;
                factors[j] = count;
                j++;
            }
        }
        if(num> 1){
            numbers[j] = num;
            factors[j] = 1;
            j++;
        }
    }

}
