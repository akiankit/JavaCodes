/*Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.*/

package com.euler.initalproblem;

import java.util.LinkedList;
import java.util.List;

public class Problem2 {
	
	static int f0 = 1;
	static int f1 = 2;
	static int maxLimit = 4000000;
	static List<Integer> fibonacciList = new LinkedList<Integer>();
	
	public static void main(String[] args) {
		/*int sum = 0;
		for(int i=0;i<fibonacciList.size();i++){
			Integer integer = fibonacciList.get(i);
			if(integer%2==0){
				sum +=integer;
			}
		}
		System.out.println(fibonacciList);
		System.out.println(sum);*/
		System.out.println(getList());
	}
	
	static int getList(){
		int sum =2;
		fibonacciList.add(f0);
		fibonacciList.add(f1);
		int num =f0+f1;
		while(num < maxLimit){
			if(num%2==0){
				sum +=num;
			}
			//fibonacciList.add(num);
			//int lastIndex = fibonacciList.size()-1;
//			f0=fibonacciList.get(lastIndex);
//			f1=fibonacciList.get(lastIndex-1);
			f0 = f1;
			f1 = num;
			num = f0+f1;
		}
		return sum;
		  
	}

}
